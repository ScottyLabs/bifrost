/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUser"];
        put: operations["updateUser"];
        post?: never;
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApplication"];
        put?: never;
        post: operations["submitApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Checkin: {
            /** Format: uuid */
            id?: string;
            event?: components["schemas"]["Event"];
            name?: string;
            description?: string;
            /** Format: int64 */
            startTime?: number;
            /** Format: int64 */
            endTime?: number;
            /** Format: int32 */
            points?: number;
            /** @enum {string} */
            accessLevel?: "PARTICIPANT" | "MENTOR" | "SPONSOR" | "JUDGE" | "ORGANIZER" | "ADMIN";
            active?: boolean;
            enableSelfCheckin?: boolean;
        };
        Event: {
            /** Format: uuid */
            id?: string;
            name?: string;
            website?: string;
            logo?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
        };
        Team: {
            /** Format: uuid */
            id?: string;
            name?: string;
            description?: string;
            leader?: components["schemas"]["User"];
            members?: components["schemas"]["User"][];
            open?: boolean;
        };
        User: {
            /** Format: uuid */
            id?: string;
            username: string;
            email: string;
            name: string;
            team?: components["schemas"]["Team"];
            college: string;
            /** @enum {string} */
            status: "UNVERIFIED" | "VERIFIED" | "COMPLETED_PROFILE" | "ADMITTED" | "REJECTED" | "CONFIRMED" | "DECLINED" | "WAITLISTED";
            roles?: string[];
            checkins: components["schemas"]["UserCheckin"][];
        };
        UserCheckin: {
            /** Format: uuid */
            id?: string;
            user?: components["schemas"]["User"];
            checkin?: components["schemas"]["Checkin"];
            /** Format: date-time */
            timestamp?: string;
        };
        Application: {
            /** Format: uuid */
            id?: string;
            user?: components["schemas"]["User"];
            essayQuestion1?: string;
            essayQuestion2?: string;
            github?: string;
            designPortfolio?: string;
            resumeFilePath?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
        };
    };
    getApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Application"];
                };
            };
        };
    };
    submitApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Application"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Application"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
        };
    };
}
